require 'asciidoctor'
require 'rake/clean'
require 'rake/testtask'

OUTDIR = "public"
SOURCE = "src/index.adoc"
FONTDIR = "fonts"

CLEAN.include(OUTDIR)

Rake::TestTask.new do |test|
  test.test_files = Dir['test/**/*_test.rb']
  test.verbose = true
end

def relative_lib( fn )
  here = File.split( __FILE__ )[0]
  File.join( here, "lib", fn )
end

def req_extra_libs(t)
  srces = [
    ["prawn-linewrap-ja", [:pdf]],
    ["asciidoctor-pdf-horz-dlist", [:pdf]],
    ["asciidoctor-abstractblock-xreftext", [:pdf,:html]],
    ["asciidoctor-table-font", [:pdf,:html]],
    ["asciidoctor-pdf-outline", [:pdf]],
    ["asciidoctor-pdf-table-keeptogether", [:pdf]],
    ["asciidoctor-replacements", [:pdf,:html]],
    ["asciidoctor-pdf-custom-property", [:pdf]],
  ]
  srces.map{ |fn, typ|
    typ.include?(t) ? "-r " + relative_lib(fn) : ""
  }.join(" ")
end

def copy_font(fn)
  FileUtils.mkdir_p( FONTDIR )
  return if File.exist?(File.join( FONTDIR, fn))
  %w[
    ~/Library/Fonts/
    /Library/Fonts/
  ].each do |src_dir|
    src_dir.gsub!( /^\~/, Dir.home )
    src_fn = File.join( src_dir, fn )
    p [ File.exist?(src_fn), src_fn ] if /Gen/===src_fn
    next unless File.exist?(src_fn)
    FileUtils.cp( src_fn, FONTDIR )
  end
end

MATH_FONTS = %w[
  cmex10.ttf cmmi10.ttf cmr10.ttf cmsy10.ttf
  esint10.ttf eufm10.ttf msam10.ttf msbm10.ttf
].freeze

MATHFNOT_URL = "http://mirrors.ctan.org/fonts/cm/ps-type1/bakoma/ttf/"

def download_mathfont(m)
  Dir.chdir( File.join( Dir.home, "Library/Fonts" ) ) do
    unless File.exist?(m)
      sh "curl -LO #{MATHFNOT_URL}/#{m}"
    end
  end
end

rule '.tex.svg' => ['.tex', 'src/nabetex2svg.jsonc'] do |t|
  sh "$(npm bin)/nabetex2svg -t #{t.source} -o #{t.name} -s src/nabetex2svg.jsonc" 
end

desc 'Prepare Font'
task :prepare_font do
  %w[
    GenShinGothic-P-Normal.ttf
    GenShinGothic-P-Bold.ttf
    Ricty-Regular.ttf
    Ricty-Bold.ttf
    ipaexm.ttf
  ].each do |fn|
    copy_font(fn)
  end

  MATH_FONTS.each do |m|
    download_mathfont(m)
  end
end

TEX_SVGS = %w(
  sample
  日本語を含む
).map{ |e| File.join( 'src', 'images', e+'.tex.svg' ) }

desc 'Create PDF'
task pdf: [:prepare_font, *TEX_SVGS] do
  cmd = %W(
    asciidoctor-pdf
    -a version=1.2.3
    #{req_extra_libs( :pdf )}
    -r asciidoctor-mathematical
    -r asciidoctor-diagram
    -a pdf-style=src/style/theme.yml
    #{SOURCE}
    -o #{OUTDIR}/book.pdf)
  sh cmd.join(" ")
end

desc 'Create PDF(cjk)'
task pdf_cjk: [:prepare_font, *TEX_SVGS] do
  cmd = %W(
    asciidoctor-pdf
    -a version=1.2.3
    -r asciidoctor-pdf-cjk
    -r asciidoctor-mathematical
    -r asciidoctor-diagram
    -a pdf-style=src/style/theme.yml
    #{SOURCE}
    -o #{OUTDIR}/book_cjk.pdf)
  sh cmd.join(" ")
end

desc 'Create PDF(cjk_lw)'
task pdf_cjk_lw: [:prepare_font, *TEX_SVGS] do
  cmd = %W(
    asciidoctor-pdf
    -a version=1.2.3
    -r asciidoctor-pdf-linewrap-ja
    -r asciidoctor-mathematical
    -r asciidoctor-diagram
    -a pdf-style=src/style/theme.yml
    #{SOURCE}
    -o #{OUTDIR}/book_cjk_lw.pdf)
  sh cmd.join(" ")
end

desc 'Create HTML'
task :html do
  cmd = %W(
    asciidoctor
    -d book
    #{req_extra_libs( :html )}
    -r asciidoctor-mathematical
    -r asciidoctor-diagram
    -a pdf-style=src/style/theme.yml
    #{SOURCE}
    -o #{OUTDIR}/index.html
  )
  sh cmd.join(" ")
  sh "cp -rp src/images #{OUTDIR}"
end

task :default => [:pdf, :pdf_cjk, :pdf_cjk_lw]
